// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.brett.schedulingapi;

import com.brett.schedulingapi.TimeSlot;
import java.util.Calendar;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect TimeSlot_Roo_Finder {
    
    public static Long TimeSlot.countFindTimeSlotsByActivityTimeBetween(Calendar minActivityTime, Calendar maxActivityTime) {
        if (minActivityTime == null) throw new IllegalArgumentException("The minActivityTime argument is required");
        if (maxActivityTime == null) throw new IllegalArgumentException("The maxActivityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TimeSlot AS o WHERE o.activityTime BETWEEN :minActivityTime AND :maxActivityTime", Long.class);
        q.setParameter("minActivityTime", minActivityTime);
        q.setParameter("maxActivityTime", maxActivityTime);
        return ((Long) q.getSingleResult());
    }
    
    public static Long TimeSlot.countFindTimeSlotsByActivityTimeEquals(Calendar activityTime) {
        if (activityTime == null) throw new IllegalArgumentException("The activityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TimeSlot AS o WHERE o.activityTime = :activityTime", Long.class);
        q.setParameter("activityTime", activityTime);
        return ((Long) q.getSingleResult());
    }
    
    public static Long TimeSlot.countFindTimeSlotsByHasCapacityEqualsAndActivityTimeBetween(Boolean hasCapacity, Calendar minActivityTime, Calendar maxActivityTime) {
        if (hasCapacity == null) throw new IllegalArgumentException("The hasCapacity argument is required");
        if (minActivityTime == null) throw new IllegalArgumentException("The minActivityTime argument is required");
        if (maxActivityTime == null) throw new IllegalArgumentException("The maxActivityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TimeSlot AS o WHERE o.hasCapacity = :hasCapacity  AND o.activityTime BETWEEN :minActivityTime AND :maxActivityTime", Long.class);
        q.setParameter("hasCapacity", hasCapacity);
        q.setParameter("minActivityTime", minActivityTime);
        q.setParameter("maxActivityTime", maxActivityTime);
        return ((Long) q.getSingleResult());
    }
    
    public static Long TimeSlot.countFindTimeSlotsByUsedCapacityLessThanAndActivityTimeBetween(Integer usedCapacity, Calendar minActivityTime, Calendar maxActivityTime) {
        if (usedCapacity == null) throw new IllegalArgumentException("The usedCapacity argument is required");
        if (minActivityTime == null) throw new IllegalArgumentException("The minActivityTime argument is required");
        if (maxActivityTime == null) throw new IllegalArgumentException("The maxActivityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TimeSlot AS o WHERE o.usedCapacity < :usedCapacity  AND o.activityTime BETWEEN :minActivityTime AND :maxActivityTime", Long.class);
        q.setParameter("usedCapacity", usedCapacity);
        q.setParameter("minActivityTime", minActivityTime);
        q.setParameter("maxActivityTime", maxActivityTime);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<TimeSlot> TimeSlot.findTimeSlotsByActivityTimeBetween(Calendar minActivityTime, Calendar maxActivityTime) {
        if (minActivityTime == null) throw new IllegalArgumentException("The minActivityTime argument is required");
        if (maxActivityTime == null) throw new IllegalArgumentException("The maxActivityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        TypedQuery<TimeSlot> q = em.createQuery("SELECT o FROM TimeSlot AS o WHERE o.activityTime BETWEEN :minActivityTime AND :maxActivityTime", TimeSlot.class);
        q.setParameter("minActivityTime", minActivityTime);
        q.setParameter("maxActivityTime", maxActivityTime);
        return q;
    }
    
    public static TypedQuery<TimeSlot> TimeSlot.findTimeSlotsByActivityTimeBetween(Calendar minActivityTime, Calendar maxActivityTime, String sortFieldName, String sortOrder) {
        if (minActivityTime == null) throw new IllegalArgumentException("The minActivityTime argument is required");
        if (maxActivityTime == null) throw new IllegalArgumentException("The maxActivityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        String jpaQuery = "SELECT o FROM TimeSlot AS o WHERE o.activityTime BETWEEN :minActivityTime AND :maxActivityTime";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<TimeSlot> q = em.createQuery(jpaQuery, TimeSlot.class);
        q.setParameter("minActivityTime", minActivityTime);
        q.setParameter("maxActivityTime", maxActivityTime);
        return q;
    }
    
    public static TypedQuery<TimeSlot> TimeSlot.findTimeSlotsByActivityTimeEquals(Calendar activityTime) {
        if (activityTime == null) throw new IllegalArgumentException("The activityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        TypedQuery<TimeSlot> q = em.createQuery("SELECT o FROM TimeSlot AS o WHERE o.activityTime = :activityTime", TimeSlot.class);
        q.setParameter("activityTime", activityTime);
        return q;
    }
    
    public static TypedQuery<TimeSlot> TimeSlot.findTimeSlotsByActivityTimeEquals(Calendar activityTime, String sortFieldName, String sortOrder) {
        if (activityTime == null) throw new IllegalArgumentException("The activityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        String jpaQuery = "SELECT o FROM TimeSlot AS o WHERE o.activityTime = :activityTime";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<TimeSlot> q = em.createQuery(jpaQuery, TimeSlot.class);
        q.setParameter("activityTime", activityTime);
        return q;
    }
    
    public static TypedQuery<TimeSlot> TimeSlot.findTimeSlotsByHasCapacityEqualsAndActivityTimeBetween(Boolean hasCapacity, Calendar minActivityTime, Calendar maxActivityTime) {
        if (hasCapacity == null) throw new IllegalArgumentException("The hasCapacity argument is required");
        if (minActivityTime == null) throw new IllegalArgumentException("The minActivityTime argument is required");
        if (maxActivityTime == null) throw new IllegalArgumentException("The maxActivityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        TypedQuery<TimeSlot> q = em.createQuery("SELECT o FROM TimeSlot AS o WHERE o.hasCapacity = :hasCapacity  AND o.activityTime BETWEEN :minActivityTime AND :maxActivityTime", TimeSlot.class);
        q.setParameter("hasCapacity", hasCapacity);
        q.setParameter("minActivityTime", minActivityTime);
        q.setParameter("maxActivityTime", maxActivityTime);
        return q;
    }
    
    public static TypedQuery<TimeSlot> TimeSlot.findTimeSlotsByHasCapacityEqualsAndActivityTimeBetween(Boolean hasCapacity, Calendar minActivityTime, Calendar maxActivityTime, String sortFieldName, String sortOrder) {
        if (hasCapacity == null) throw new IllegalArgumentException("The hasCapacity argument is required");
        if (minActivityTime == null) throw new IllegalArgumentException("The minActivityTime argument is required");
        if (maxActivityTime == null) throw new IllegalArgumentException("The maxActivityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        String jpaQuery = "SELECT o FROM TimeSlot AS o WHERE o.hasCapacity = :hasCapacity  AND o.activityTime BETWEEN :minActivityTime AND :maxActivityTime";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<TimeSlot> q = em.createQuery(jpaQuery, TimeSlot.class);
        q.setParameter("hasCapacity", hasCapacity);
        q.setParameter("minActivityTime", minActivityTime);
        q.setParameter("maxActivityTime", maxActivityTime);
        return q;
    }
    
    public static TypedQuery<TimeSlot> TimeSlot.findTimeSlotsByUsedCapacityLessThanAndActivityTimeBetween(Integer usedCapacity, Calendar minActivityTime, Calendar maxActivityTime) {
        if (usedCapacity == null) throw new IllegalArgumentException("The usedCapacity argument is required");
        if (minActivityTime == null) throw new IllegalArgumentException("The minActivityTime argument is required");
        if (maxActivityTime == null) throw new IllegalArgumentException("The maxActivityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        TypedQuery<TimeSlot> q = em.createQuery("SELECT o FROM TimeSlot AS o WHERE o.usedCapacity < :usedCapacity  AND o.activityTime BETWEEN :minActivityTime AND :maxActivityTime", TimeSlot.class);
        q.setParameter("usedCapacity", usedCapacity);
        q.setParameter("minActivityTime", minActivityTime);
        q.setParameter("maxActivityTime", maxActivityTime);
        return q;
    }
    
    public static TypedQuery<TimeSlot> TimeSlot.findTimeSlotsByUsedCapacityLessThanAndActivityTimeBetween(Integer usedCapacity, Calendar minActivityTime, Calendar maxActivityTime, String sortFieldName, String sortOrder) {
        if (usedCapacity == null) throw new IllegalArgumentException("The usedCapacity argument is required");
        if (minActivityTime == null) throw new IllegalArgumentException("The minActivityTime argument is required");
        if (maxActivityTime == null) throw new IllegalArgumentException("The maxActivityTime argument is required");
        EntityManager em = TimeSlot.entityManager();
        String jpaQuery = "SELECT o FROM TimeSlot AS o WHERE o.usedCapacity < :usedCapacity  AND o.activityTime BETWEEN :minActivityTime AND :maxActivityTime";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<TimeSlot> q = em.createQuery(jpaQuery, TimeSlot.class);
        q.setParameter("usedCapacity", usedCapacity);
        q.setParameter("minActivityTime", minActivityTime);
        q.setParameter("maxActivityTime", maxActivityTime);
        return q;
    }
    
}
